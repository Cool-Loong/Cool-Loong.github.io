<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>IO流注意事项</title>
      <link href="/2019/02/19/IO%E6%B5%81%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2019/02/19/IO%E6%B5%81%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="IO流其他知识"><a href="#IO流其他知识" class="headerlink" title="IO流其他知识"></a>IO流其他知识</h4><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><ul><li>1.字符流出现的原因</li><li>2.String中的编解码问题[理解]</li><li>3.转换流[掌握]<ul><li>3.1 转换流OutputStreamWriter的使用</li><li>3.2 转换流InputStreamReader的使用</li><li>3.3 字符流的5种写数据的方式</li><li>3.4 字符流的2种读数据的方式</li><li>3.5 高效流FileWriter和FileReader</li><li>3.6 字符缓冲流的基本使用</li><li>3.7 字符缓冲流的特殊功能</li></ul></li><li>4.IO流的练习题<ul><li>4.1 字符流复制文本文件</li><li>4.2 FileWriter和FileReader复制文本文件</li><li>4.3 字符缓冲流的特殊功能复制文本文件</li><li>4.4 把集合中的数据存储到文本文件</li><li>4.5 把文本文件中的数据存储到集合中</li><li>4.6 随机获取文本文件中的姓名</li><li>4.7 复制单级文件夹</li><li>4.8 复制指定目录下指定后缀名的文件并修改名称</li><li>4.7和4.8工具类</li><li>4.9 键盘录入学生信息按照总分排序并写入文本文件</li></ul></li><li>5.IO流大总结<ul><li>5.1 按操作方式分类结构图</li><li>5.2 按操作对象分类结构图</li></ul></li></ul><h3 id="1-字符流出现的原因"><a href="#1-字符流出现的原因" class="headerlink" title="1.字符流出现的原因"></a>1.字符流出现的原因</h3><h4 id="1-1-字符流出现的原因及编码表概述"><a href="#1-1-字符流出现的原因及编码表概述" class="headerlink" title="1.1 字符流出现的原因及编码表概述"></a>1.1 字符流出现的原因及编码表概述</h4><ul><li>字符流出现的原因:由于字节流操作中文不是特别方便，所以，java就提供了字符流。</li><li>字符流:  字符流 = 字节流 + 编码表</li></ul><h3 id="2-String中的编解码问题"><a href="#2-String中的编解码问题" class="headerlink" title="2.String中的编解码问题"></a>2.String中的编解码问题</h3><h4 id="2-1-String类中的编码和解码问题"><a href="#2-1-String类中的编码和解码问题" class="headerlink" title="2.1 String类中的编码和解码问题"></a>2.1 String类中的编码和解码问题</h4><ul><li>String(byte[] bytes, String charsetName):通过指定的字符集解码字节数组</li><li>byte[] getBytes(String charsetName):使用指定的字符集合把字符串编码为字节数组</li><li>编码:把看得懂的变成看不懂的:    String – byte[]</li><li>解码:把看不懂的变成看得懂的:    byte[] – String</li></ul><h3 id="3-转换流-掌握"><a href="#3-转换流-掌握" class="headerlink" title="3.转换流[掌握]"></a>3.转换流[掌握]</h3><h4 id="3-1-转换流OutputStreamWriter的使用"><a href="#3-1-转换流OutputStreamWriter的使用" class="headerlink" title="3.1 转换流OutputStreamWriter的使用"></a>3.1 转换流OutputStreamWriter的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 字符输出流:OutputStreamWriter (转换输出流)字符流通向字节流的桥梁</span><br><span class="line"> * 构造方法:</span><br><span class="line"> * public OutputStreamWriter(OutputStream out): 使用默认字符集</span><br><span class="line"> * public OutputStreamWriter(OutputStream out , String charsetName):使用指定的字符集</span><br><span class="line"> * 字符输入流:InputStreamReader  (转换输入流)字节流通向字符流的桥梁</span><br><span class="line"> * 构造方法:</span><br><span class="line"> * public InputStreamReader(InputStream in)使用的默认的编码表(GBK)</span><br><span class="line"> * public InputStreamReader(InputStream in , String charsetName)使用指定的编码表</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class OutputStreamWriterDemo &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">// 创建: OutputStreamWriter</span><br><span class="line">// 创建: OutputStream的对象</span><br><span class="line">//FileOutputStream fos = new FileOutputStream(&quot;a.txt&quot;) ;</span><br><span class="line">//OutputStreamWriter osw = new OutputStreamWriter(fos) ;</span><br><span class="line">//OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;a.txt&quot;)) ;</span><br><span class="line">// public InputStreamReader(InputStream in , String charsetName)使用指定的编码表</span><br><span class="line">OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;a.txt&quot;) , &quot;UTF-8&quot;) ;</span><br><span class="line">// 调用方法</span><br><span class="line">osw.write(&quot;中国&quot;) ;</span><br><span class="line">// 释放资源</span><br><span class="line">osw.close() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-转换流InputStreamReader的使用"><a href="#3-2-转换流InputStreamReader的使用" class="headerlink" title="3.2 转换流InputStreamReader的使用"></a>3.2 转换流InputStreamReader的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class InputStreamReaderDemo &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">// 创建对象InputStreamReader的对象</span><br><span class="line">// public InputStreamReader(InputStream in): 使用的默认的编码表(GBK)</span><br><span class="line">//FileInputStream fis = new FileInputStream(&quot;a.txt&quot;) ;</span><br><span class="line">//InputStreamReader isr = new InputStreamReader(fis) ;</span><br><span class="line">//InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;a.txt&quot;)) ;// 默认的字符集就是GBK</span><br><span class="line"></span><br><span class="line">// public InputStreamReader(InputStream in , String charsetName)使用指定的编码表</span><br><span class="line">InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;a.txt&quot;) , &quot;utf-8&quot;) ;</span><br><span class="line">// 读取数据</span><br><span class="line">int ch = 0 ;</span><br><span class="line">while((ch = isr.read()) != -1)&#123;</span><br><span class="line">System.out.print((char)ch);</span><br><span class="line">&#125;</span><br><span class="line">// 释放资源</span><br><span class="line">isr.close() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-字符流的5种写数据的方式"><a href="#3-3-字符流的5种写数据的方式" class="headerlink" title="3.3 字符流的5种写数据的方式"></a>3.3 字符流的5种写数据的方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void write(int c)</span><br><span class="line">public void write(char[] cbuf)</span><br><span class="line">public void write(char[] cbuf,int off,int len)</span><br><span class="line">public void write(String str)</span><br><span class="line">public void write(String str,int off,int len)</span><br></pre></td></tr></table></figure><h4 id="3-4-字符流的2种读数据的方式"><a href="#3-4-字符流的2种读数据的方式" class="headerlink" title="3.4 字符流的2种读数据的方式"></a>3.4 字符流的2种读数据的方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public int read()</span><br><span class="line">public int read(char[] cbuf)</span><br></pre></td></tr></table></figure><h4 id="3-5-高效流FileWriter和FileReader"><a href="#3-5-高效流FileWriter和FileReader" class="headerlink" title="3.5 高效流FileWriter和FileReader"></a>3.5 高效流FileWriter和FileReader</h4><h4 id="3-6-字符缓冲流的基本使用"><a href="#3-6-字符缓冲流的基本使用" class="headerlink" title="3.6 字符缓冲流的基本使用"></a>3.6 字符缓冲流的基本使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 高效的字符输入流BufferedReader</span><br><span class="line"> * 高效的字符输出流BufferedWriter</span><br><span class="line"> */</span><br><span class="line">public class BufferedWriterDemo &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">//写数据的方式</span><br><span class="line">//write() ;</span><br><span class="line">// 读取数据的方式</span><br><span class="line">read() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用高效的字符输入流进行读取数据</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">private static void read() throws IOException&#123;</span><br><span class="line">// 创建高效的字符输入流对象</span><br><span class="line">// public BufferedReader(Reader in)</span><br><span class="line">//BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;c.txt&quot;))) ;</span><br><span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;c.txt&quot;)) ;</span><br><span class="line">// 读取数据</span><br><span class="line">//int ch = 0 ;</span><br><span class="line">//while((ch = br.read()) != -1)&#123;</span><br><span class="line">//System.out.print((char)ch);</span><br><span class="line">//&#125;</span><br><span class="line">char[] chs = new char[1024] ;</span><br><span class="line">int len = 0 ;</span><br><span class="line">while((len = br.read(chs)) != -1)&#123;</span><br><span class="line">System.out.print(new String(chs , 0 , len));</span><br><span class="line">&#125;</span><br><span class="line">// 释放资源</span><br><span class="line">br.close() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用高效的字符输出流进行写数据</span><br><span class="line"> * @throws IOException </span><br><span class="line"> */</span><br><span class="line">private static void write() throws IOException &#123;</span><br><span class="line">// 创建BufferedWriter对象</span><br><span class="line">// public BufferedWriter(Writer out)</span><br><span class="line">//OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;c.txt&quot;)) ;</span><br><span class="line">//BufferedWriter bw = new BufferedWriter(osw) ;</span><br><span class="line">//BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(&quot;c.txt&quot;))) ;</span><br><span class="line">BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;c.txt&quot;)) ;</span><br><span class="line">// 写数据</span><br><span class="line">bw.write(&quot;你好&quot;) ;</span><br><span class="line">// 释放资源</span><br><span class="line">bw.close() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-字符缓冲流的特殊功能"><a href="#3-7-字符缓冲流的特殊功能" class="headerlink" title="3.7 字符缓冲流的特殊功能"></a>3.7 字符缓冲流的特殊功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter:public void newLine():根据系统来决定换行符</span><br><span class="line">BufferedReader:public String readLine()：一次读取一行数据</span><br><span class="line">包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null</span><br></pre></td></tr></table></figure><h3 id="4-IO流的练习题"><a href="#4-IO流的练习题" class="headerlink" title="4.IO流的练习题"></a>4.IO流的练习题</h3><h4 id="4-1-字符流复制文本文件"><a href="#4-1-字符流复制文本文件" class="headerlink" title="4.1 字符流复制文本文件"></a>4.1 字符流复制文本文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class CopyFileDemo &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">// 创建转换输入流对象</span><br><span class="line">InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;OutputStreamWriterDemo.java&quot;)) ;</span><br><span class="line">// 创建转换输出流对象</span><br><span class="line">OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;copyFile.java&quot;)) ;</span><br><span class="line">// 复制文件</span><br><span class="line">// 一次读取一个字符复制</span><br><span class="line">//int ch = 0 ;</span><br><span class="line">//while((ch = isr.read()) != -1)&#123;</span><br><span class="line">//osw.write(ch) ;</span><br><span class="line">//&#125;</span><br><span class="line">// 一次读取一个字符数组复制文件</span><br><span class="line">char[] chs = new char[1024] ;</span><br><span class="line">int len = 0 ;</span><br><span class="line">while((len = isr.read(chs)) != -1)&#123;</span><br><span class="line">osw.write(chs, 0, len) ;</span><br><span class="line">&#125;</span><br><span class="line">// 释放资源</span><br><span class="line">osw.close() ;</span><br><span class="line">isr.close() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-FileWriter和FileReader复制文本文件"><a href="#4-2-FileWriter和FileReader复制文本文件" class="headerlink" title="4.2 FileWriter和FileReader复制文本文件"></a>4.2 FileWriter和FileReader复制文本文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class CopyFileDemo &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">// 创建高效的字符输入流对象</span><br><span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;OutputStreamWriterDemo.java&quot;)) ;</span><br><span class="line">// 创建高效的字符输出流对象</span><br><span class="line">BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;copyFile3.java&quot;)) ;</span><br><span class="line">// 一次读取一个字符数组复制文件</span><br><span class="line">char[] chs = new char[1024] ;</span><br><span class="line">int len = 0;</span><br><span class="line">while((len = br.read(chs)) != -1)&#123;</span><br><span class="line">bw.write(chs, 0, len) ;</span><br><span class="line">&#125; </span><br><span class="line">// 释放资源</span><br><span class="line">bw.close() ;</span><br><span class="line">br.close() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-字符缓冲流的特殊功能复制文本文件"><a href="#4-3-字符缓冲流的特殊功能复制文本文件" class="headerlink" title="4.3 字符缓冲流的特殊功能复制文本文件"></a>4.3 字符缓冲流的特殊功能复制文本文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class CopyFileDemo &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">/**</span><br><span class="line"> * 需求: 使用高效的字符流中特有的功能复制文本文件</span><br><span class="line"> */</span><br><span class="line">// 创建高效的字符输入流对象</span><br><span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;OutputStreamWriterDemo.java&quot;)) ;</span><br><span class="line"></span><br><span class="line">// 高效的字符输出流对象</span><br><span class="line">BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;copyFile4.java&quot;)) ;</span><br><span class="line"></span><br><span class="line">// 复制文件</span><br><span class="line">// 一次读取一行复制文件</span><br><span class="line">String line = null ;</span><br><span class="line">while((line = br.readLine()) != null) &#123;</span><br><span class="line">bw.write(line) ;</span><br><span class="line">bw.newLine() ;</span><br><span class="line">bw.flush() ;</span><br><span class="line">&#125;</span><br><span class="line">// 释放资源</span><br><span class="line">bw.close() ;</span><br><span class="line">br.close() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-把集合中的数据存储到文本文件"><a href="#4-4-把集合中的数据存储到文本文件" class="headerlink" title="4.4 把集合中的数据存储到文本文件"></a>4.4 把集合中的数据存储到文本文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">/**</span><br><span class="line"> * 把ArrayList集合中的数据存储到文本文件中</span><br><span class="line"> * 分析:</span><br><span class="line"> * 1: 创建ArrayList集合对象</span><br><span class="line"> * 2: 添加数据</span><br><span class="line"> * 3: 创建高效的字符输出流对象</span><br><span class="line"> * 4: 遍历集合,获取每一个元素,然后通过流对象写出去</span><br><span class="line"> * 5: 释放资源</span><br><span class="line"> */</span><br><span class="line">// 创建ArrayList集合对象</span><br><span class="line">ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;() ;</span><br><span class="line">// 添加数据</span><br><span class="line">al.add(&quot;西施&quot;) ;</span><br><span class="line">al.add(&quot;貂蝉&quot;) ;</span><br><span class="line">al.add(&quot;杨玉环&quot;) ;</span><br><span class="line">al.add(&quot;王昭君&quot;) ;</span><br><span class="line">// 创建高效的字符输出流对象</span><br><span class="line">BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;names.txt&quot;)) ;</span><br><span class="line">// 遍历集合,获取每一个元素,然后通过流对象写出去</span><br><span class="line">for(String name : al) &#123;</span><br><span class="line">bw.write(name) ;</span><br><span class="line">bw.newLine() ;</span><br><span class="line">bw.flush() ;</span><br><span class="line">&#125;</span><br><span class="line">// 释放资源</span><br><span class="line">bw.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-把文本文件中的数据存储到集合中"><a href="#4-5-把文本文件中的数据存储到集合中" class="headerlink" title="4.5 把文本文件中的数据存储到集合中"></a>4.5 把文本文件中的数据存储到集合中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">/**</span><br><span class="line"> * 从文本文件中读取数据(每一行为一个字符串数据)到集合中，并遍历集合</span><br><span class="line"> * 分析:</span><br><span class="line"> * 1: 创建高效的字符输入流对象</span><br><span class="line"> * 2: 创建集合对象</span><br><span class="line"> * 3: 读取文本文件中的数据,将数据存储到集合中</span><br><span class="line"> * 4: 释放资源</span><br><span class="line"> * 5: 遍历集合</span><br><span class="line"> */</span><br><span class="line">// 1: 创建高效的字符输入流对象</span><br><span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;names.txt&quot;)) ;</span><br><span class="line">// 2: 创建集合对象</span><br><span class="line">ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;() ;</span><br><span class="line">// 3: 读取文本文件中的数据,将数据存储到集合中</span><br><span class="line">String line = null ;// 作用: 用来记录读取到的行数据</span><br><span class="line">while((line = br.readLine()) != null) &#123;</span><br><span class="line">al.add(line) ;</span><br><span class="line">&#125;</span><br><span class="line">// 4: 释放资源</span><br><span class="line">br.close() ;</span><br><span class="line">// 5: 遍历集合</span><br><span class="line">for(String name : al) &#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-随机获取文本文件中的姓名"><a href="#4-6-随机获取文本文件中的姓名" class="headerlink" title="4.6 随机获取文本文件中的姓名"></a>4.6 随机获取文本文件中的姓名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">// 1: 创建集合对象</span><br><span class="line">ArrayList&lt;String&gt; students = new ArrayList&lt;String&gt; () ;</span><br><span class="line">// 2: 创建BufferedReader对象</span><br><span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;students.txt&quot;)) ;</span><br><span class="line">// 3: 读取数据,把数据存储到集合中</span><br><span class="line">String line = null ;</span><br><span class="line">while((line = br.readLine()) != null) &#123;</span><br><span class="line">students.add(line) ;</span><br><span class="line">&#125;</span><br><span class="line">// 4: 释放资源</span><br><span class="line">br.close() ;</span><br><span class="line">// 5: 生成一个随机数</span><br><span class="line">Random random = new Random() ;</span><br><span class="line">int index = random.nextInt(students.size());</span><br><span class="line">// 6: 把生成的随机数作为集合元素的索引,来获取一个元素</span><br><span class="line">String name = students.get(index) ;</span><br><span class="line">// 7: 把获取到的元素打印到控制台</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-复制单级文件夹"><a href="#4-7-复制单级文件夹" class="headerlink" title="4.7 复制单级文件夹"></a>4.7 复制单级文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">/**</span><br><span class="line"> * 需求: 把C:\\course这个文件夹复制到D:\\course盘下</span><br><span class="line"> * 分析:</span><br><span class="line"> * 1: 把C:\\course这个目录封装成一个File对象</span><br><span class="line"> * 2: 把D:\\course这个目录封装成一个File对象</span><br><span class="line"> * 3: 判断D:\\course是否存在,如果存在就创建一个文件夹</span><br><span class="line"> * 4: 获取C:\\course这个目录下所有的文件对应的File数组</span><br><span class="line"> * 5: 遍历数组,获取元素进行复制</span><br><span class="line"> */</span><br><span class="line">// 把C:\\course这个目录封装成一个File对象</span><br><span class="line">File srcFolder = new File(&quot;C:\\course&quot;) ;</span><br><span class="line">// 把D:\\course这个目录封装成一个File对象</span><br><span class="line">File destFolder = new File(&quot;D:\\course&quot;) ;</span><br><span class="line">// 判断D:\\course是否存在,如果存在就创建一个文件夹</span><br><span class="line">if(!destFolder.exists())&#123;</span><br><span class="line">destFolder.mkdir() ;</span><br><span class="line">&#125;</span><br><span class="line">// 复制文件夹</span><br><span class="line">IOUtils.copyFolder(srcFolder, destFolder, null) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-8-复制指定目录下指定后缀名的文件并修改名称"><a href="#4-8-复制指定目录下指定后缀名的文件并修改名称" class="headerlink" title="4.8 复制指定目录下指定后缀名的文件并修改名称"></a>4.8 复制指定目录下指定后缀名的文件并修改名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">/**</span><br><span class="line"> * 把C:\\demo这个目录下所有的以.java结尾的文件复制到D:\\demo中,然后将这个文件的后缀名更改为.jad</span><br><span class="line"> */</span><br><span class="line">// 把C:\\demo这个目录下所有的以.java结尾的文件复制到D:\\demo中</span><br><span class="line">// 1: 把C:\\demo这个目录封装成一个File对象</span><br><span class="line">File srcFolder = new File(&quot;C:\\demo&quot;) ;</span><br><span class="line">// 2: 把D:\\demo这么目录封装成一个File对象</span><br><span class="line">File destFolder = new File(&quot;D:\\demo&quot;) ;</span><br><span class="line">// 3: 判断D:\\demo这个路径是否存在</span><br><span class="line">if(!destFolder.exists()) &#123;</span><br><span class="line">destFolder.mkdir() ;</span><br><span class="line">&#125;</span><br><span class="line">// 调用方法</span><br><span class="line">IOUtils.copyFolder(srcFolder, destFolder, new FilenameFilter() &#123;</span><br><span class="line">@Override</span><br><span class="line">public boolean accept(File dir, String name) &#123;</span><br><span class="line">return new File(dir , name).isFile() &amp;&amp; name.endsWith(&quot;.java&quot;) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) ;</span><br><span class="line">System.out.println(&quot;-----------------------------------------------------&quot;);</span><br><span class="line">// 获取destFolder下所有的文件对应的File数组</span><br><span class="line">File[] files = destFolder.listFiles() ;</span><br><span class="line">for(File f : files) &#123;</span><br><span class="line">// 创建目标文件名称</span><br><span class="line">String destFileName = f.getName().replace(&quot;.java&quot;, &quot;.jad&quot;) ;</span><br><span class="line">// 创建目标文件</span><br><span class="line">File destFile = new File(destFolder , destFileName) ;</span><br><span class="line">// 调用</span><br><span class="line">f.renameTo(destFile) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7和4-8工具类"><a href="#4-7和4-8工具类" class="headerlink" title="4.7和4.8工具类"></a>4.7和4.8工具类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class IOUtils &#123;</span><br><span class="line"></span><br><span class="line">public static void copyFolder(String srcPahtName , String destPathName , FilenameFilter filenameFilter) throws IOException &#123;</span><br><span class="line">File srcFolder = new File(srcPahtName) ;</span><br><span class="line">File destFolder = new File(destPathName) ;</span><br><span class="line">if(!destFolder.exists()) &#123;</span><br><span class="line">destFolder.mkdir() ;</span><br><span class="line">&#125;</span><br><span class="line">copyFolder(srcFolder , destFolder , filenameFilter) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void copyFolder(File srcFolder , File destFolder , FilenameFilter filenameFilter) throws IOException &#123;</span><br><span class="line">File[] files = null ;</span><br><span class="line">if(filenameFilter == null) &#123;</span><br><span class="line">files = srcFolder.listFiles() ;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">files = srcFolder.listFiles(filenameFilter) ;</span><br><span class="line">&#125;</span><br><span class="line">// 遍历</span><br><span class="line">for(File f : files) &#123;</span><br><span class="line">// 创建目标文件</span><br><span class="line">String destFileName = f.getName() ;</span><br><span class="line">File destFile = new File(destFolder , destFileName) ; </span><br><span class="line">// 复制文件</span><br><span class="line">copyFile(f , destFile) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public static void copyFile(File srcFile , File destFile) throws IOException &#123;</span><br><span class="line">// 创建流对象</span><br><span class="line">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(srcFile)) ;</span><br><span class="line">BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destFile)) ;</span><br><span class="line"></span><br><span class="line">// 一次读取一个字节数组复制文件</span><br><span class="line">byte[] bytes = new byte[1024] ;</span><br><span class="line">int len = 0 ;</span><br><span class="line">while((len = bis.read(bytes)) != -1)&#123;</span><br><span class="line">bos.write(bytes, 0, len) ;</span><br><span class="line">&#125;</span><br><span class="line">// 释放资源</span><br><span class="line">bos.close() ;</span><br><span class="line">bis.close() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-9-键盘录入学生信息按照总分排序并写入文本文件"><a href="#4-9-键盘录入学生信息按照总分排序并写入文本文件" class="headerlink" title="4.9 键盘录入学生信息按照总分排序并写入文本文件"></a>4.9 键盘录入学生信息按照总分排序并写入文本文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 需求：键盘录入3个学生信息(姓名,语文成绩(chineseScore),数学成绩(mathScore),英语成绩(englishScore)),按照总分从高到低存入文本文件</span><br><span class="line"> * 分析:</span><br><span class="line"> * 1: 创建一个学生类</span><br><span class="line"> * 2: 创建一个集合对象TreeSet集合</span><br><span class="line"> * 3: 键盘录入学生信息,把学生信息封装到学生对象中,然后把学生对象添加到集合中</span><br><span class="line"> * 4: 创建一个高效的字符输出流对象</span><br><span class="line"> * 5: 遍历集合,获取每一个元素,把其信息写入到文件中</span><br><span class="line"> * 6: 释放资源</span><br><span class="line"> */</span><br><span class="line">//  创建一个集合对象TreeSet集合</span><br><span class="line">TreeSet&lt;Student&gt; ts = new TreeSet&lt;Student&gt;(new Comparator&lt;Student&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(Student s1, Student s2) &#123;</span><br><span class="line">// 总分</span><br><span class="line">int num = s2.getTotalScore() - s1.getTotalScore() ;</span><br><span class="line">// 比较姓名</span><br><span class="line">int num2 = (num == 0) ? s2.getName().compareTo(s1.getName()) : num ;</span><br><span class="line">// 返回</span><br><span class="line">return num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) ;</span><br><span class="line"></span><br><span class="line">// 3: 键盘录入学生信息,把学生信息封装到学生对象中,然后把学生对象添加到集合中</span><br><span class="line">for(int x = 1 ; x &lt;= 3 ; x++) &#123;</span><br><span class="line">// 创建Scanner对象</span><br><span class="line">Scanner sc = new Scanner(System.in) ;</span><br><span class="line">System.out.println(&quot;请您输入第&quot; + x + &quot;个学生的姓名&quot; );</span><br><span class="line">String sutName = sc.nextLine() ;</span><br><span class="line">System.out.println(&quot;请您输入第&quot; + x + &quot;个学生的语文成绩&quot; );</span><br><span class="line">int chineseScore = sc.nextInt() ;</span><br><span class="line">System.out.println(&quot;请您输入第&quot; + x + &quot;个学生的数学成绩&quot; );</span><br><span class="line">int mathScore = sc.nextInt() ;</span><br><span class="line">System.out.println(&quot;请您输入第&quot; + x + &quot;个学生的英语成绩&quot; );</span><br><span class="line">int englishScore = sc.nextInt() ;</span><br><span class="line"></span><br><span class="line">// 把学生的信封装到一个学生对象中</span><br><span class="line">Student s = new Student() ;</span><br><span class="line">s.setName(sutName) ;</span><br><span class="line">s.setMathScore(mathScore) ;</span><br><span class="line">s.setChineseScore(chineseScore) ;</span><br><span class="line">s.setEnglishScore(englishScore) ;</span><br><span class="line">// 把学生的信息添加到集合中</span><br><span class="line">ts.add(s) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建一个高效的字符输出流对象</span><br><span class="line">BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;student.info&quot;)) ;</span><br><span class="line">bw.write(&quot;==========================================学生的信息如下====================================================&quot;) ;</span><br><span class="line">bw.newLine() ;</span><br><span class="line">bw.flush() ;</span><br><span class="line">bw.write(&quot;姓名\t\t总分\t\t数学成绩\t\t语文成绩\t\t英语成绩\t\t&quot;) ;</span><br><span class="line">bw.newLine() ;</span><br><span class="line">bw.flush() ;</span><br><span class="line">for(Student t : ts) &#123;</span><br><span class="line">bw.write(t.getName() + &quot;\t\t&quot; + t.getTotalScore() + &quot;\t\t&quot; + t.getMathScore() + &quot;\t\t&quot; + t.getChineseScore() + &quot;\t\t&quot; + t.getEnglishScore()) ;</span><br><span class="line">bw.newLine() ;</span><br><span class="line">bw.flush() ;</span><br><span class="line">&#125;</span><br><span class="line">// 释放资源</span><br><span class="line">bw.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-IO流大总结【图是摘自网络，感觉很棒】"><a href="#5-IO流大总结【图是摘自网络，感觉很棒】" class="headerlink" title="5.IO流大总结【图是摘自网络，感觉很棒】"></a>5.IO流大总结【图是摘自网络，感觉很棒】</h3><h4 id="5-1-按操作方式分类结构图"><a href="#5-1-按操作方式分类结构图" class="headerlink" title="5.1 按操作方式分类结构图"></a>5.1 按操作方式分类结构图</h4><ul><li>关于IO流总结如下图所示</li><li><img src="https://upload-images.jianshu.io/upload_images/4432347-ddbc1b96f5ccb688.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li></ul><h4 id="5-2-按操作对象分类结构图"><a href="#5-2-按操作对象分类结构图" class="headerlink" title="5.2 按操作对象分类结构图"></a>5.2 按操作对象分类结构图</h4><ul><li>关于IO流总结如下图所示</li><li><img src="https://upload-images.jianshu.io/upload_images/4432347-1ce768b945041ce8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IO流</title>
      <link href="/2019/02/19/IO%E6%B5%81/"/>
      <url>/2019/02/19/IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="IO流基础知识"><a href="#IO流基础知识" class="headerlink" title="IO流基础知识"></a>IO流基础知识</h4><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><ul><li>1.IO的概述<ul><li>1.1 IO流概述及其前奏</li></ul></li><li>2.IO流整体介绍</li><li>3.File文件类<ul><li>3.1 File类的概述和方法介绍【掌握】</li></ul></li><li>4.递归<ul><li>4.1 递归概述和注意事项</li></ul></li><li>5.IO流<ul><li>5.1 IO流概述及其分类【掌握】</li><li>5.2 输入流和输出流分类</li><li>5.3 IO流基类概述和FileOutputStream的构造方法【掌握】</li><li>5.4 FileOutputStream【掌握】</li><li>5.5 FileInputStream【掌握】</li></ul></li><li>6.IO流案例<ul><li>6.1 字节流复制文本文件【字节流一次读写一个字节复制文本文件】</li><li>6.2 字节流复制MP3【字节流一次读写一个字节复制MP3】</li><li>6.3 FileInputStream读取数据一次一个字节数组【】</li><li>6.4 FileInputStream读取数据的两种方式比较</li><li>6.5 字节流复制文本文件【字节流一次读写一个字节数组复制文本文件】</li><li>6.6 字节流复制MP3【字节流一次读写一个字节数组复制MP3】</li></ul></li><li>7.Buffer缓冲数据流<ul><li>7.1 BufferedOutputStream写出数据</li><li>7.2 BufferedInputStream读取数据</li><li>7.3 字节流四种方式复制MP3并测试效率<ul><li>基本字节流一次读写一个字节</li><li>基本字节流一次读写一个字节数组</li><li>高效字节流一次读写一个字节</li><li>高效字节流一次读写一个字节数组</li></ul></li></ul></li></ul><h3 id="1-IO的概述"><a href="#1-IO的概述" class="headerlink" title="1.IO的概述"></a>1.IO的概述</h3><ul><li>1.1 IO流概述及其前奏<ul><li>A:IO流概述<ul><li>IO流用来处理设备之间的数据传输</li><li>上传文件和下载文件</li></ul></li><li>B:IO流前奏<ul><li>讲解IO流之前为什么先讲解异常和File类呢?</li><li>因为File表示的是IO流将来要操作的文件，所以我们需要学习File类。</li><li>而常见操作文件无非就是上传文件和下载文件，在这个操作的过程中可能出现问题，</li><li>出现问题后，我们需要对对应的代码进行处理。所以我们需要学习异常。</li></ul></li></ul></li></ul><h3 id="2-IO流整体介绍"><a href="#2-IO流整体介绍" class="headerlink" title="2.IO流整体介绍"></a>2.IO流整体介绍</h3><h3 id="3-File文件类"><a href="#3-File文件类" class="headerlink" title="3.File文件类"></a>3.File文件类</h3><ul><li><strong>3.1 File类的概述和方法介绍【掌握】</strong><ul><li>A:File类的概述<ul><li>文件和目录路径名的抽象表示形式</li></ul></li><li>B:构造方法<ul><li>File(String pathname)：                 根据一个路径得到File对象</li><li>File(String parent, String child):    根据一个目录和一个子文件/目录得到File对象</li><li>File(File parent, String child):        根据一个父File对象和一个子文件/目录得到File对象</li></ul></li><li>C:创建功能<ul><li>public boolean createNewFile():        创建文件 如果存在这样的文件，就不创建了</li><li>public boolean mkdir():                 创建文件夹 如果存在这样的文件夹，就不创建了</li><li>public boolean mkdirs():                创建文件夹,如果父文件夹不存在，会帮你创建出来</li><li>注意事项：如果你创建文件或者文件夹忘了写盘符路径，那么，默认在项目路径下。</li></ul></li><li>D:删除功能<ul><li>public boolean delete():        删除文件或者文件夹</li><li>注意事项：Java中的删除不走回收站。要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹</li></ul></li><li>E:重命名功能<ul><li>public boolean renameTo(File dest):    把文件重命名为指定的文件路径</li><li>注意事项：如果路径名相同，就是改名。如果路径名不同，就是改名并剪切。</li></ul></li><li>F:判断功能<ul><li>public boolean isDirectory():        判断是否是目录</li><li>public boolean isFile():        判断是否是文件</li><li>public boolean exists():        判断是否存在</li><li>public boolean canRead():        判断是否可读</li><li>public boolean canWrite():        判断是否可写</li><li>public boolean isHidden():        判断是否隐藏</li></ul></li><li>G:获取功能<ul><li>public String getAbsolutePath()：    获取绝对路径</li><li>public String getPath():        获取相对路径</li><li>public String getName():        获取名称</li><li>public long length():            获取长度。字节数</li><li>public long lastModified():        获取最后一次的修改时间，毫秒值</li><li>public String[] list():            获取指定目录下的所有文件或者文件夹的名称数组</li><li>public File[] listFiles():        获取指定目录下的所有文件或者文件夹的File数组</li></ul></li></ul></li></ul><h3 id="4-递归"><a href="#4-递归" class="headerlink" title="4.递归"></a>4.递归</h3><ul><li><strong>4.1 递归概述和注意事项</strong><ul><li>递归概述:    方法定义中调用方法本身的现象</li><li>递归注意事项    要有出口，否则就是死递归。次数不能太多，否则就内存溢出</li><li>递归解决问题的思想及图解</li><li>案例代码</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    show(5) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 递归</span><br><span class="line"> */</span><br><span class="line">public static void show(int n) &#123;</span><br><span class="line">    if(n == 0)&#123;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(n);</span><br><span class="line">    show(--n) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-IO流"><a href="#5-IO流" class="headerlink" title="5.IO流"></a>5.IO流</h3><ul><li><strong>5.1 IO流概述及其分类【掌握】</strong><ul><li>A:IO流概述<ul><li>IO流用来处理设备之间的数据传输</li><li>Java对数据的操作是通过流的方式</li><li>Java用于操作流的对象都在IO包中</li></ul></li><li>B:IO流分类<ul><li>a:按照数据流向<ul><li>输入流    读入数据</li><li>输出流    写出数据</li></ul></li><li>b:按照数据类型<ul><li>字节流</li><li>字符流</li><li>什么情况下使用哪种流呢?</li><li>如果数据所在的文件通过windows自带的记事本打开并能读懂里面的内容，就用字符流。其他用字节流。</li><li>如果你什么都不知道，就用字节流</li></ul></li><li>c:字节流和字符流<ul><li>字节流   <ul><li>字节输入流                InputStream            读</li><li>字节输出流                OutputStream         写</li></ul></li><li>字符流<ul><li>字符输入流                Reader                     读</li><li>字符输出流                Writer                      写</li></ul></li><li>上面的4个流对象都是抽象类,我们不能直接使用,我们需要使用子类</li></ul></li></ul></li></ul></li></ul><ul><li><strong>5.2 输入流和输出流分类</strong></li></ul><ul><li><strong>5.3 IO流基类概述和FileOutputStream的构造方法【掌握】</strong></li><li>IO流基类概述<ul><li>a:字节流的抽象基类：<ul><li>InputStream ，OutputStream。</li></ul></li><li>b:字符流的抽象基类：<ul><li>Reader ， Writer。</li><li>注：由这四个类派生出来的子类名称都是以其父类名作为子类名的后缀。</li><li>如：InputStream的子类FileInputStream。</li><li>如：Reader的子类FileReader。</li></ul></li></ul></li></ul><ul><li><strong>5.4 FileOutputStream【掌握】</strong></li></ul><ul><li><p>A: 构造方法</p><ul><li>FileOutputStream(File file)</li><li>FileOutputStream(String name)</li><li>注意事项：创建字节输出流对象了做了几件事情?为什么一定要close()?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    FileOutputStream fos = new FileOutputStream(&quot;a.txt&quot;) ;</span><br><span class="line">    /**</span><br><span class="line">     * 上面的代码做了什么事情?</span><br><span class="line">     *         1: 调用系统资源,创建了一个a.txt文件</span><br><span class="line">     *         2: 创建一个fos对象</span><br><span class="line">     *         3: 把fos指向a.txt</span><br><span class="line">     */</span><br><span class="line">    String s = &quot;hello, IO , 我来了&quot; ;</span><br><span class="line">    // 把字符串转换成字节数组</span><br><span class="line">    byte[] bytes = s.getBytes() ;</span><br><span class="line">    // 调用方法写数据</span><br><span class="line">    fos.write(bytes) ;</span><br><span class="line">    /**</span><br><span class="line">     * 关闭流对象</span><br><span class="line">     * 作用: 通知系统释放关于该文件的资源</span><br><span class="line">     */</span><br><span class="line">    fos.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>B:FileOutputStream的三个write()方法</p><ul><li>public void write(int b):写一个字节</li><li>public void write(byte[] b):写一个字节数组</li><li>public void write(byte[] b,int off,int len):写一个字节数组的一部分</li><li>FileOutputStream写出数据实现换行和追加写入<ul><li>实现数据的换行</li><li>实现数据的追加写入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    // public FileOutputStream(String name,  boolean append)</span><br><span class="line">    // 表示追加写入</span><br><span class="line">    FileOutputStream fos = new FileOutputStream(&quot;c.txt&quot; , true) ;       </span><br><span class="line">    // 写数据</span><br><span class="line">    for(int x = 0 ; x &lt; 5 ; x++) &#123;</span><br><span class="line">        byte[] bytes = (&quot;呵呵&quot; + x + &quot;\r\n&quot;).getBytes() ;</span><br><span class="line">        fos.write(bytes) ;</span><br><span class="line">    &#125;</span><br><span class="line">    // 是否资源</span><br><span class="line">    fos.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><strong>5.5 FileInputStream【掌握】</strong></li></ul><ul><li>FileInputStream读取数据一次一个字节<ul><li>int read():一次读取一个字节</li></ul></li></ul><h3 id="6-IO流案例"><a href="#6-IO流案例" class="headerlink" title="6.IO流案例"></a>6.IO流案例</h3><h4 id="6-1-字节流复制文本文件【字节流一次读写一个字节复制文本文件】"><a href="#6-1-字节流复制文本文件【字节流一次读写一个字节复制文本文件】" class="headerlink" title="6.1 字节流复制文本文件【字节流一次读写一个字节复制文本文件】"></a>6.1 字节流复制文本文件【字节流一次读写一个字节复制文本文件】</h4><ul><li>一次读取一个字节  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 复制文本文件:</span><br><span class="line">     *         读和写</span><br><span class="line">     *     分析:</span><br><span class="line">     *         1: 创建两个对象一个是字节输入流对象,一个是字节输出流对象</span><br><span class="line">     *         2: 一次读取一个字节,一次写一个字节</span><br><span class="line">     *         3: 释放资源</span><br><span class="line">     */</span><br><span class="line">    // 创建两个对象一个是字节输入流对象,一个是字节输出流对象</span><br><span class="line">    FileInputStream fis = new FileInputStream(&quot;FileOutputStreamDemo.java&quot;) ;</span><br><span class="line">    FileOutputStream fos = new FileOutputStream(&quot;copyFile.java&quot;) ;</span><br><span class="line">    // 一次读取一个字节,一次写一个字节</span><br><span class="line">    int by = 0 ;</span><br><span class="line">    while((by = fis.read()) != -1)&#123;</span><br><span class="line">        fos.write(by) ;</span><br><span class="line">    &#125;</span><br><span class="line">    // 释放资源</span><br><span class="line">    fos.close() ;</span><br><span class="line">    fis.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-2-字节流复制MP3【字节流一次读写一个字节复制MP3】"><a href="#6-2-字节流复制MP3【字节流一次读写一个字节复制MP3】" class="headerlink" title="6.2 字节流复制MP3【字节流一次读写一个字节复制MP3】"></a>6.2 字节流复制MP3【字节流一次读写一个字节复制MP3】</h4><ul><li>一次读取一个字节  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    // 需求: 使用字节流复制mp3文件</span><br><span class="line">    // 创建字节输入流和字节输出流对象</span><br><span class="line">    FileInputStream fis = new FileInputStream(&quot;C:\\a.mp3&quot;) ;</span><br><span class="line">    FileOutputStream fos = new FileOutputStream(&quot;D:\\a.mp3&quot;) ;</span><br><span class="line">    // 复制文件</span><br><span class="line">    int by = 0 ;</span><br><span class="line">    while((by = fis.read()) != -1)&#123;</span><br><span class="line">        fos.write(by) ;</span><br><span class="line">    &#125;</span><br><span class="line">    // 释放资源</span><br><span class="line">    fos.close() ;</span><br><span class="line">    fis.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-3-FileInputStream读取数据一次一个字节数组"><a href="#6-3-FileInputStream读取数据一次一个字节数组" class="headerlink" title="6.3 FileInputStream读取数据一次一个字节数组"></a>6.3 FileInputStream读取数据一次一个字节数组</h4><h4 id="6-4-FileInputStream读取数据的两种方式比较"><a href="#6-4-FileInputStream读取数据的两种方式比较" class="headerlink" title="6.4 FileInputStream读取数据的两种方式比较"></a>6.4 FileInputStream读取数据的两种方式比较</h4><h4 id="6-5-字节流复制文本文件【字节流一次读写一个字节数组复制文本文件】"><a href="#6-5-字节流复制文本文件【字节流一次读写一个字节数组复制文本文件】" class="headerlink" title="6.5 字节流复制文本文件【字节流一次读写一个字节数组复制文本文件】"></a>6.5 字节流复制文本文件【字节流一次读写一个字节数组复制文本文件】</h4><ul><li>字节流一次读写一个字节数组  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 需求: 使用字节流复制文本文件,采用字节输入流的第二种读取数据的方式</span><br><span class="line">     */</span><br><span class="line">    // 创建字节输入流对象和字节输出流对象</span><br><span class="line">    FileInputStream fis = new FileInputStream(&quot;FileOutputStreamDemo.java&quot;) ;</span><br><span class="line">    FileOutputStream fos = new FileOutputStream(&quot;copyFile2.java&quot;) ;</span><br><span class="line">    // 一次读取一个字节数组复制文件</span><br><span class="line">    byte[] bytes = new byte[1024] ;</span><br><span class="line">    int len = 0 ;        // 作用: 记录读取到的有效的字节个数</span><br><span class="line">    while((len = fis.read(bytes)) != -1)&#123;</span><br><span class="line">        fos.write(bytes, 0, len) ;</span><br><span class="line">    &#125;</span><br><span class="line">    // 释放资源</span><br><span class="line">    fos.close() ;</span><br><span class="line">    fis.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-6-字节流复制MP3【字节流一次读写一个字节数组复制MP3】"><a href="#6-6-字节流复制MP3【字节流一次读写一个字节数组复制MP3】" class="headerlink" title="6.6 字节流复制MP3【字节流一次读写一个字节数组复制MP3】"></a>6.6 字节流复制MP3【字节流一次读写一个字节数组复制MP3】</h4><ul><li>一次读取一个字节数组  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 需求: 使用字节流复制mp3文件一次读取一个字节数组</span><br><span class="line">     */</span><br><span class="line">    // 创建对象</span><br><span class="line">    FileInputStream fis = new FileInputStream(&quot;C:\\a.mp3&quot;) ;</span><br><span class="line">    FileOutputStream fos = new FileOutputStream(&quot;D:\\a.mp3&quot;) ;</span><br><span class="line">    // 一次读取一个字节数组复制文件</span><br><span class="line">    byte[] bytes = new byte[1024] ;</span><br><span class="line">    int len = 0 ;</span><br><span class="line">    while((len = fis.read(bytes)) != -1)&#123;</span><br><span class="line">        fos.write(bytes, 0, len) ;</span><br><span class="line">    &#125;</span><br><span class="line">    // 释放资源</span><br><span class="line">    fos.close() ;</span><br><span class="line">    fis.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-Buffer缓冲数据流"><a href="#7-Buffer缓冲数据流" class="headerlink" title="7.Buffer缓冲数据流"></a>7.Buffer缓冲数据流</h3><h4 id="7-1-BufferedOutputStream写出数据"><a href="#7-1-BufferedOutputStream写出数据" class="headerlink" title="7.1 BufferedOutputStream写出数据"></a>7.1 BufferedOutputStream写出数据</h4><ul><li>代码如下所示：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    /**</span><br><span class="line">     * BufferedOutputStream构造方法:</span><br><span class="line">     *         public BufferedOutputStream(OutputStream out)</span><br><span class="line">     */</span><br><span class="line">    // 创建FileOutputStream对象</span><br><span class="line">    //FileOutputStream fos = new FileOutputStream(&quot;buf.txt&quot;) ;</span><br><span class="line">    //BufferedOutputStream bof = new BufferedOutputStream(fos) ;</span><br><span class="line">    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;buf.txt&quot;)) ;</span><br><span class="line">    // 调用方法</span><br><span class="line">    bos.write(&quot;哈哈,我来了&quot;.getBytes()) ;</span><br><span class="line">    // 释放资源</span><br><span class="line">    bos.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-2-BufferedInputStream读取数据"><a href="#7-2-BufferedInputStream读取数据" class="headerlink" title="7.2 BufferedInputStream读取数据"></a>7.2 BufferedInputStream读取数据</h4><ul><li>代码如下所示：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    /**</span><br><span class="line">     * BufferedInputStream构造方法:</span><br><span class="line">     *         public BufferedInputStream(InputStream in)</span><br><span class="line">     */</span><br><span class="line">    BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;e.txt&quot;)) ;</span><br><span class="line">    // 一次读取一个字节</span><br><span class="line">    //int by = 0 ;</span><br><span class="line">    //while((by = bis.read()) != -1)&#123;</span><br><span class="line">    //    System.out.print((char)by);</span><br><span class="line">    //&#125;</span><br><span class="line">    // 一次读取一个字节数组</span><br><span class="line">    byte[] bytes = new byte[1024] ;</span><br><span class="line">    int len = 0 ;</span><br><span class="line">    while((len = bis.read(bytes)) != -1)&#123;</span><br><span class="line">        System.out.print(new String(bytes , 0 , len));</span><br><span class="line">    &#125;</span><br><span class="line">    // 释放资源</span><br><span class="line">    bis.close() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-3-字节流四种方式复制MP3并测试效率"><a href="#7-3-字节流四种方式复制MP3并测试效率" class="headerlink" title="7.3 字节流四种方式复制MP3并测试效率"></a>7.3 字节流四种方式复制MP3并测试效率</h4><ul><li>基本字节流一次读写一个字节</li><li>基本字节流一次读写一个字节数组</li><li>高效字节流一次读写一个字节</li><li>高效字节流一次读写一个字节数组  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">public class CopyFileDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // 获取开始时间</span><br><span class="line">        long startTime = System.currentTimeMillis() ;</span><br><span class="line">        // 复制文件</span><br><span class="line">        copyFile_4() ;</span><br><span class="line">        // 获取结束时间</span><br><span class="line">        long endTime = System.currentTimeMillis() ;</span><br><span class="line">        // 输出</span><br><span class="line">        System.out.println(&quot;复制文件使用的时间是:&quot; + (endTime - startTime) + &quot;毫秒&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 高效流一次读取一个字节数组赋值文件</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public static void copyFile_4() throws IOException &#123;       </span><br><span class="line">        // 复制文件使用的时间是:50毫秒</span><br><span class="line">        // 创建高效流对象</span><br><span class="line">        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;C:\\a.avi&quot;)) ;</span><br><span class="line">        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;D:\\a.avi&quot;)) ;</span><br><span class="line">        // 一次读取一个字节数组</span><br><span class="line">        byte[] bytes = new byte[1024] ;</span><br><span class="line">        int len = 0 ;</span><br><span class="line">        while((len = bis.read(bytes)) != -1)&#123;</span><br><span class="line">            bos.write(bytes, 0, len) ;</span><br><span class="line">        &#125;</span><br><span class="line">        // 释放资源</span><br><span class="line">        bos.close() ;</span><br><span class="line">        bis.close() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 高效流一次读取一个字节复制文件</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public static void copyFile_3() throws IOException &#123;       </span><br><span class="line">        // 复制文件使用的时间是:990毫秒</span><br><span class="line">        // 创建高效流对象</span><br><span class="line">        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;C:\\a.avi&quot;)) ;</span><br><span class="line">        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;D:\\a.avi&quot;)) ;</span><br><span class="line">        // 一次读取一个字节</span><br><span class="line">        int by = 0 ;</span><br><span class="line">        while((by = bis.read()) != -1)&#123;</span><br><span class="line">            bos.write(by) ;</span><br><span class="line">        &#125;</span><br><span class="line">        // 释放资源</span><br><span class="line">        bos.close() ;</span><br><span class="line">        bis.close() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 基本流一次读取一个字节数组复制文件</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    private static void copyFile_2() throws IOException &#123;       </span><br><span class="line">        // 复制文件使用的时间是:130毫秒</span><br><span class="line">        // 创建对象</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;C:\\a.avi&quot;) ;</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;D:\\a.avi&quot;) ;</span><br><span class="line"></span><br><span class="line">        // 一次读取一个字节数组</span><br><span class="line">        byte[] bytes = new byte[1024] ;</span><br><span class="line">        int len = 0 ;</span><br><span class="line">        while((len = fis.read(bytes)) != -1)&#123;</span><br><span class="line">            fos.write(bytes, 0, len) ;</span><br><span class="line">        &#125;</span><br><span class="line">        // 释放资源</span><br><span class="line">        fos.close() ;</span><br><span class="line">        fis.close() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 基本流一次读取一个字节复制文件</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    private static void copyFile_1() throws IOException &#123;   </span><br><span class="line">        // 复制文件使用的时间是:88670毫秒</span><br><span class="line">        // 创建对象</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;C:\\a.avi&quot;) ;</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;D:\\a.avi&quot;) ;</span><br><span class="line">        // 一次读取一个字节</span><br><span class="line">        int by = 0 ;</span><br><span class="line">        while((by = fis.read()) != -1)&#123;</span><br><span class="line">            fos.write(by) ;</span><br><span class="line">        &#125;</span><br><span class="line">        // 释放资源</span><br><span class="line">        fos.close() ;</span><br><span class="line">        fis.close() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title> 运算符and语句</title>
      <link href="/2019/01/17/%E8%BF%90%E7%AE%97%E7%AC%A6and%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/01/17/%E8%BF%90%E7%AE%97%E7%AC%A6and%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul><li>算术运算符包括：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * / % ++  --</span><br></pre></td></tr></table></figure></li></ul><h3 id="“-”号的几种作用："><a href="#“-”号的几种作用：" class="headerlink" title="“+”号的几种作用："></a>“+”号的几种作用：</h3><ol><li>加法</li><li>正数</li><li>字符串连接符</li></ol><h3 id="“-“使用的时候要注意"><a href="#“-“使用的时候要注意" class="headerlink" title="“-“使用的时候要注意:"></a>“-“使用的时候要注意:</h3><ul><li>整数相除，只能得到整数</li><li>要想要得到小数，可以*1.0</li></ul><h3 id="和–的应用"><a href="#和–的应用" class="headerlink" title="++和–的应用"></a>++和–的应用</h3><ul><li>单独使用效果相同</li><li>参与运算使用，在操作数的前后效果不同</li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ul><li><p>关系运算符包括:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">== != &gt; &lt; &gt;= &lt;=</span><br></pre></td></tr></table></figure></li><li><p>注意：<br>关系运算符的结果都是boolean型的，也就是不是true,就是false<br>关系运算符的“==”是代表等于号</p></li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul><li>“=”<br>int a=1;<br>int b=2;  </li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li><p>逻辑运算符包括:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;  |  ^    !  &amp;&amp;    ||</span><br><span class="line">与 或 异或  非 and or</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符用于连接布尔型表达式，在Java中不可以写成3&lt;x&lt;6，应该写成x&gt;3 &amp; x&lt;6 。</p></li><li>“&amp;”和“&amp;&amp;”的区别：</li></ul><ol><li>单&amp;时，左边无论真假，右边都进行运算；</li><li>双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</li></ol><ul><li>“|”和“||”的区别同理，双或时，左边为真，右边不参与运算。</li><li>异或( ^ )与或( | )的不同之处是：当左右都为true时，结果为false。</li></ul><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">左移：&lt;&lt;</span><br><span class="line">右移：&gt;&gt;</span><br><span class="line">无符号右移: &gt;&gt;&gt;</span><br><span class="line">与运算: &amp;</span><br><span class="line">或运算: |</span><br><span class="line">异或运算： ^</span><br><span class="line">反码: ~</span><br></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul><li>(关系表达式)?表达式1：表达式2；</li><li>如果条件为true，运算后的结果是表达式1；</li><li>如果条件为false，运算后的结果是表达式2；</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取两个数中大数。</span><br><span class="line">int x=3,y=4,z;</span><br><span class="line">z = (x&gt;y)?x:y;//z变量存储的就是两个数的大数。</span><br></pre></td></tr></table></figure><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>从上到下执行</p><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><ul><li>分支结构 </li></ul><ol><li>if</li><li>switch</li></ol><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h3><h3 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java基础知识</title>
      <link href="/2018/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><ol><li>计算机<br>电子计算机，俗称电脑。是一种能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。由硬件和软件所组成  </li><li>计算机硬件<br>计算机通常由CPU、主板、内存、电源、主机箱、硬盘、显卡、键盘、鼠标，显示器等多个部件组成。  </li><li>计算机软件<br>使用计算机过程中必不可少的东西，计算机按照事先预定好的顺序完成特定的功能，按照其功能可以分为系统软件和应用软件。  </li></ol><ul><li>应用软件  <blockquote><p>我们平常使用的电脑软件就是应用软件，例如QQ，eclipse等  </p></blockquote></li><li>系统软件  <blockquote><p>Windows,Linux,Unix,Mac,Anadroid,iOS</p></blockquote></li></ul><h2 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h2><ul><li>软件<br>按照特定顺序组织的计算机数据和指令的集合  </li><li>软件开发<br>借助开发工具与计算机语言制作软件的过程  </li></ul><h2 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h2><p>人与计算机之间进行交流沟通的一种特殊的语言，方便人与计算机之间的交流  </p><ul><li>常用的计算机语言  <blockquote><p>java<br>python<br>c<br>c++<br>c#</p></blockquote></li></ul><h2 id="常用的快捷键"><a href="#常用的快捷键" class="headerlink" title="常用的快捷键"></a>常用的快捷键</h2><pre><code>Ctrl+A:全选    Ctrl+C:复制Ctrl+V:粘贴    Ctrl+S:剪切Ctrl+Z:撤销    Ctrl+S:保存</code></pre><h2 id="DOS命令"><a href="#DOS命令" class="headerlink" title="DOS命令"></a>DOS命令</h2><pre><code>(1)切换盘符(掌握)    d: 回车(2)显示某目录下的所有文件或者文件夹(掌握)    dir 回车(3)创建文件夹    md 文件夹名称 回车(4)删除文件夹    rd 文件夹名称 回车(5)进入目录(掌握)    单级进入 cd 目录名称     多级进入 cd 目录名称1\目录名称2\...(6)回退目录(掌握)    单级回退 cd..    回退根目录 cd\(7)删除文件    del 文件名称    *.txt 可以表示多个文件名称(8)清屏(掌握)    cls(9)退出    exit(10)扩展DOS命令    删除带内容的文件夹    rd /s 文件夹名称 会提示是否删除    rd /q /s 文件夹名称 直接删除</code></pre><h1 id="Java发展历史"><a href="#Java发展历史" class="headerlink" title="Java发展历史"></a>Java发展历史</h1><p>略</p><ul><li>java语言版本  </li></ul><ol><li>javaSE   </li><li>javaME  </li><li>javaEE  </li></ol><h2 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h2><blockquote><p>简单性<br>面向对象<br>健壮性<br>结构中立<br>高性能<br>多线程<br>动态<br>安全性<br>跨平台  </p></blockquote><h2 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>因为有了JVM，所以同一个Java程序在三个不同的操作系统中都可以执行。这样就实现了Java程序的跨平台性。也称为Java具有良好的可移植性。  </p><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>(Java Runtime Environment)Java运行环境  </p><blockquote><p>包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</p></blockquote><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>(Java Development Kit    Java开发工具包)  </p><blockquote><p>JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。<br>其中的开发工具：编译工具(javac.exe)  打包工具(jar.exe)等  </p></blockquote><h3 id="JDK、JRE、JVM三者关系"><a href="#JDK、JRE、JVM三者关系" class="headerlink" title="JDK、JRE、JVM三者关系"></a>JDK、JRE、JVM三者关系</h3><ul><li>Jdk&gt;jre&gt;jvm  </li></ul><h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><ol><li>系统环境变量<ol><li>JAVA_HOME:&gt;&gt;&gt; D:\jdk1.8(JDK的安装路径)  </li><li>Classpath:&gt;&gt;&gt; .;(基本不用安装)  </li><li>Path :&gt;&gt;&gt; %JAVA_HOME%\bin</li></ol></li><li>path和classpath的区别:<ol><li>path环境变量里面记录的是可执行性文件，如.exe文件，对可执行文件先在当前路径去找，如果没找到就去path环境变量中配置的路径去找  </li><li>classpath环境变量里记录的是java类的运行文件所在的目录  </li></ol></li></ol><blockquote><p>Path环境变量配错的话就会报这个错误：Java.dll 文件找不到<br>验证安装JDK是否成功：进入doc–&gt;cmd–&gt;java   </p></blockquote><h2 id="编辑java程序："><a href="#编辑java程序：" class="headerlink" title="编辑java程序："></a>编辑java程序：</h2><h3 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h3><p>使用记事本编辑java程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class test&#123;</span><br><span class="line">    //程序的入口</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    System.out.println(&quot;java hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="程序的执行流程"><a href="#程序的执行流程" class="headerlink" title="程序的执行流程"></a>程序的执行流程</h4><p>将我们的java成程序放到JVM中，把java程序进行编译成java.class文件（字节码文件，二进制文件。还要经过类加载器将java.class文件加载到jvm中）。  </p><ul><li>Javac:将java文件编程字节码文件。（java.class文件)  </li><li>Java:运行java字节码文件，执行程序。  <blockquote><p>以后开发Java程序基本都会用开发工具来进行开发，好处：不用我们自己手动编译，开发工具会帮我们自动的编译java文件并且校验java程序。 </p></blockquote></li></ul><h3 id="开发工具的使用"><a href="#开发工具的使用" class="headerlink" title="开发工具的使用"></a>开发工具的使用</h3><h4 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h4><ul><li>用java se 视图创建java工程。<br>  File–&gt;new—&gt;javaprojiect.</li><li>eclipse中经常用到的快捷键  <blockquote><p>语句的补全：alt+/<br>删除整行：ctrl+D<br>恢复上一步：ctrl+z<br>进入下一步：ctrl+y<br>代码行的移动：alt+上/下键<br>代码的格式化之一：alt+shift+f<br>代码的格式化之二：alt+shift+s<br>单行注释：ctrl+/<br>解除注释 ：ctrl+/<br>多行注释：ctrl+shift+/<br>解除注释 ：ctrl+shift+\</p></blockquote></li></ul><h4 id="Java程序的创建"><a href="#Java程序的创建" class="headerlink" title="Java程序的创建"></a>Java程序的创建</h4><p>工程名–&gt;包–&gt;类</p><pre><code>- 注释：1. 单行注释:  //2. 多行注释：/***/3. 文档注释: /** **/</code></pre><h1 id="java基础知识"><a href="#java基础知识" class="headerlink" title="java基础知识"></a>java基础知识</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ol><li>概述<br>被Java语言赋予特定含义的单词  </li><li>特点<br>组成关键字的字母全部小写  </li><li>举例  </li></ol><ul><li>用于定义数据类型的关键字  <blockquote><p>long  float double char boolean int short byte interface class void</p></blockquote></li><li>用于定于数据类型值的关键字<blockquote><p>true false null</p></blockquote></li><li>用于定于流程控制的关键字  <blockquote><p>if else switch case  default while do for break continue return </p></blockquote></li><li>用于定于访问修饰符的关键字<blockquote><p>public protected private  </p></blockquote></li><li>用于定于类，函数，变量修饰符的关键字<blockquote><p>abstract final static synchronized   </p></blockquote></li><li>用于定于类与类之间关系的关键字<blockquote><p>extends implements</p></blockquote></li><li>用于定于建立实例及引用实例，判断实例的关键字<blockquote><p>new  this super instanceof </p></blockquote></li><li>用于异常处理的关键字  <blockquote><p>try catch finally throw throws  </p></blockquote></li><li>用于包的关键字  <blockquote><p>import package  </p></blockquote></li><li>其他修饰符关键字<blockquote><p>native strictfp transient volatile assert</p></blockquote></li></ul><p>关键字其实就是英语单词，但是这个英语单词代表特殊含义。</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol><li>概述:<br>给类,接口,方法,变量等起名字时使用的字符序列  </li><li><p>规则:</p><blockquote><p>英文大小写字母<br>数字字符<br>$和—_</p></blockquote></li><li><p>注意事项:</p><blockquote><p>不能以数字开头<br>不能是java中的关键字<br>区分大小写</p></blockquote></li><li><p>常见命名方式：</p><pre><code>A:包 其实就是文件夹,用于解决相同类名问题    全部小写    单级：com    多级：cn.itcastB:类或者接口    一个单词：首字母大写        Student,Person,Teacher    多个单词：每个单词的首字母大写        HelloWorld,MyName,NameDemoC:方法或者变量    一个单词：全部小写        name,age,show()    多个单词：从第二个单词开始，每个单词首字母大写        myName,showAllStudentNames()D:常量    一个单词：全部大写        AGE    多个单词：每个单词都大写，用_连接        STUDENT_MAX_AGE</code></pre></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p>Int byte short long boolean char float double </p></blockquote><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">占用存储空间</th><th style="text-align:center">表示范围</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1字节</td><td style="text-align:center">-127~127</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2字节</td><td style="text-align:center">-2^15~2^15+1</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">2个字节</td><td style="text-align:center">0~2^15-1</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">四个字节</td><td style="text-align:center">-2^31~2^31+1</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">八个字节</td><td style="text-align:center">-2^63~2^63+1</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">4个字节</td><td style="text-align:center">-2^31~2^31+1</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">八个字节</td><td style="text-align:center">-2^63~2^63+1</td></tr></tbody></table><h4 id="数据的转换"><a href="#数据的转换" class="headerlink" title="数据的转换"></a>数据的转换</h4><ul><li><p>强制转换：<br>  大–&gt;小  </p></li><li><p>自动转换：<br>小–&gt;大</p></li></ul><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><blockquote><p>String 数组 类 接口</p></blockquote><ul><li>特点:<br>都可以创建对象（基本） </li><li>基本用法  </li></ul><ol><li>充当变量；<br> 变量的定义：<br> （相对）局部变量： <pre><code>方法中的变量、异常中的变量、内部类中的变量。生命周期：例如方法中：随着方法的创建而创建，随着方法的销毁而销毁。</code></pre> （相对）全局变量：<pre><code>类中的变量。修饰符：public private proteced (default)格式：修饰符+数据类型+变量名;   定义：private int num;</code></pre></li><li>方法参数;</li><li>返回值；<br>标识符<br>例如：类名、方法名、接口名、变量名等等；<br>规范：TestDemo（类） setName(驼峰结构) namePassword(驼峰结构/全部小写)</li></ol><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>在计算机内，有符号数有3种表示法：原码、反码和补码。所有数据的运算都是采用补码进行的。  </p><blockquote><p>GBK、UTF-8、ISO-8859-1、Unicode 、URLUnicode 、ASSCII </p></blockquote><ul><li>ASSCII:<br>字符跟数字的关系。一个</li><li>GBK：<br>2个</li><li>UTF-8：<br>英文2个、中文3个。</li></ul><ol><li><p>原码<br>就是二进制定点表示法，即最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。  </p></li><li><p>反码<br>正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。  </p></li><li><p>补码<br>正数的补码与其原码相同；负数的补码是在其反码的末位加1</p></li></ol><ul><li>正负数编码</li></ul><ol><li><p>负数:</p><blockquote><p>原码  反码  补码–&gt;  原码—按位取反–&gt;反码— +1 –&gt;补码<br> 负数取值：例如-3   1000 0011（原码）–&gt; 0111 1100（反码）–&gt;0111 1101(补码)<br> 取值：看原码，转换：看补码。<br> 数值：符号位也是数值位。</p></blockquote></li><li><p>正数：<br>原码  反码  补码</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown学习</title>
      <link href="/2018/12/22/Markdown%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/12/22/Markdown%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。  </p><h1 id="一-设置标题"><a href="#一-设置标题" class="headerlink" title="一 设置标题"></a>一 设置标题</h1><h2 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h2><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># h1标题</span><br><span class="line">## h2标题</span><br><span class="line">### h3标题</span><br><span class="line">#### h4标题</span><br><span class="line">##### h5标题</span><br><span class="line">###### h6标题</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><h1 id="h1标题"><a href="#h1标题" class="headerlink" title="h1标题"></a>h1标题</h1><h2 id="h2标题"><a href="#h2标题" class="headerlink" title="h2标题"></a>h2标题</h2><h3 id="h3标题"><a href="#h3标题" class="headerlink" title="h3标题"></a>h3标题</h3><h4 id="h4标题"><a href="#h4标题" class="headerlink" title="h4标题"></a>h4标题</h4><h5 id="h5标题"><a href="#h5标题" class="headerlink" title="h5标题"></a>h5标题</h5><h6 id="h6标题"><a href="#h6标题" class="headerlink" title="h6标题"></a>h6标题</h6><h2 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h2><ul><li><p>示例  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 第一种</span><br><span class="line">h1标题</span><br><span class="line">===</span><br><span class="line">第二种  </span><br><span class="line">h2标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>效果: </p></li></ul><h1 id="h1标题-1"><a href="#h1标题-1" class="headerlink" title="h1标题"></a>h1标题</h1><h2 id="h2标题-1"><a href="#h2标题-1" class="headerlink" title="h2标题"></a>h2标题</h2><p>-</p><h1 id="二-字体"><a href="#二-字体" class="headerlink" title="二 字体"></a>二 字体</h1><ul><li>加粗<br>要加粗的文字左右分别用两个*号包起来  </li></ul><ul><li>斜体<br>-要倾斜的文字左右分别用一个*号包起来  </li></ul><ul><li>斜体加粗<br>要倾斜和加粗的文字左右分别用三个*号包起来</li><li>删除线<br>要加删除线的文字左右分别用两个~~号包起来  </li></ul><ul><li><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure></li><li><p>显示效果:  </p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del>  </p></li></ul><h1 id="三-自然段换行"><a href="#三-自然段换行" class="headerlink" title="三 自然段换行"></a>三 自然段换行</h1><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ul><li>在一段话结束的位置加上<strong>两个空格</strong> </li><li>aaa  bbb  ccc   </li></ul><ul><li>aaa  </li><li>bbb  </li><li>ccc </li></ul><h1 id="四-引用"><a href="#四-引用" class="headerlink" title="四 引用"></a>四 引用</h1><p>在引用的文字前面加上”&gt;”,</p><ul><li><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello world </span><br><span class="line">&gt;hello world最外层引用</span><br><span class="line">&gt;&gt;Loong中间层的引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;dragon 这里是最里面的引用</span><br></pre></td></tr></table></figure></li><li><p>效果如下<br>hello world </p><blockquote><p>hello world最外层引用</p><blockquote><p>Loong中间层的引用</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>dragon 这里是最里面的引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></li></ul><h1 id="五-增加分割线"><a href="#五-增加分割线" class="headerlink" title="五 增加分割线"></a>五 增加分割线</h1><p>增加分割线有二种写法，-和*都可以</p><ul><li><p>示例  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---  </span><br><span class="line">***</span><br></pre></td></tr></table></figure></li><li><p>显示结果  </p></li></ul><hr><hr><p>可以看到他们显示的效果是一样的</p><h1 id="六-列表表示方法"><a href="#六-列表表示方法" class="headerlink" title="六 列表表示方法"></a>六 列表表示方法</h1><h2 id="（1）有序列表"><a href="#（1）有序列表" class="headerlink" title="（1）有序列表"></a>（1）有序列表</h2><p>使用数字表示有序列表，和平常我们使用的是一样的<br>数字加点表示</p><ul><li>示例  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 一</span><br><span class="line">2. 二</span><br><span class="line">3. 三</span><br></pre></td></tr></table></figure></li></ul><ul><li>数字表示有序列表  </li></ul><ol><li>一</li><li>二</li><li>三</li></ol><p><strong>这里踩的坑</strong><br>这里的1.和后面的内容要有一个空格</p><h2 id="（2）无序列表"><a href="#（2）无序列表" class="headerlink" title="（2）无序列表"></a>（2）无序列表</h2><p>无序列表和有序列表差不多，只是无序列表使用的是数学符号替代  </p><ul><li>可以用三种符号表示</li></ul><blockquote><p>列表符号：-<br>列表符号：+<br>列表符号：*    </p></blockquote><ul><li>示例   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- 一级列表</span><br><span class="line">- 一级列表</span><br><span class="line">  - 二级列表</span><br><span class="line">  - 二级列表</span><br><span class="line">+ 一级列表</span><br><span class="line">  + 二级列表</span><br><span class="line">    + 三级列表</span><br><span class="line">    + 三级列表</span><br><span class="line">  * 二级列表</span><br><span class="line">    * 三级列表</span><br><span class="line">    * 三级列表</span><br><span class="line">    * 三级列表</span><br></pre></td></tr></table></figure></li></ul><p><strong>显示的效果如下:</strong>  </p><ul><li>一级列表</li><li>一级列表<ul><li>二级列表</li><li>二级列表</li></ul></li></ul><ul><li>一级列表<ul><li>二级列表<ul><li>三级列表</li><li>三级列表</li></ul></li></ul><ul><li>二级列表<ul><li>三级列表</li><li>三级列表</li><li>三级列表</li></ul></li></ul></li></ul><p>我们可以看到三种符号显示的效果都是一样的  </p><h1 id="七-超链接"><a href="#七-超链接" class="headerlink" title="七 超链接"></a>七 超链接</h1><ul><li><p>示例  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](https://www.baidu.com)</span><br></pre></td></tr></table></figure></li><li><p>显示结果<br><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p></li><li><p>表示方法:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名字](超链接的地址URL &quot;超链接的title\&quot;)</span><br></pre></td></tr></table></figure></li><li><p>示例:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[博客](https://dlblog.xyz &quot;Loong个人博客&quot;)</span><br></pre></td></tr></table></figure></li><li><p>显示效果:<br><a href="https://dlblog.xyz" title="Loong个人博客" target="_blank" rel="noopener">我的博客</a> </p></li></ul><p><strong>这里踩的坑</strong><br>你所引用的链接的地址要写全，eg:前面一定要记得加上https://</p><h1 id="八-代码高亮显示"><a href="#八-代码高亮显示" class="headerlink" title="八 代码高亮显示"></a>八 代码高亮显示</h1><h2 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h2><p>单行代码:代码之间分别用反引号包括起来表示</p><ul><li>样式:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`printf(&quot;i love Loong!!!&quot;)`</span><br></pre></td></tr></table></figure></li></ul><ul><li>例子:<br><code>printf(&quot;i love Loong!!!&quot;)</code>   </li></ul><h2 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h2><p>使用三个反单引号 ` 或者是三个波浪线 ~ ,其中反单引号使用的更多<br>注意: 上下的三个反引号单独占一行表示  </p><ul><li>1.三个反单引号 ` 表示<br>效果如下:<pre><code>int add(int a,int b){  int c=a+b;  return c;}</code></pre></li><li>2.使用波浪线 ~表示<br>效果如下:  <pre><code>void print(){     printf(&quot;我的网址是:dlblog.xyz&quot;);}</code></pre></li><li><p>这里踩的坑<br>三个符号后面记得加上两个空格，代表结束，否者会出现引用的错乱</p><h1 id="九-显示图片"><a href="#九-显示图片" class="headerlink" title="九 显示图片"></a>九 显示图片</h1></li><li><p>样式语法  </p><pre><code>![ 图片alt ](  图片地址 &apos;&apos;图片title&apos;&apos;)  </code></pre><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加  </p></li><li>示例     <pre><code>![Loong](https://dlblog.xyz/uploads/head.jpg &quot;图片title&quot;)</code></pre></li><li>效果如下<br><img src="https://dlblog.xyz/uploads/head.jpg" alt="Loong" title="这里是图片title"></li></ul><h1 id="十-表格"><a href="#十-表格" class="headerlink" title="十 表格"></a>十 表格</h1><ul><li>语法<pre><code>| 表头 | 表头 | 表头 ||:----|:----:|----:|| TD1 | TD2 | TD3 || TD4 | TD5 | TD6 |</code></pre>第二行表示的是:分割表头和内容。<br>其实只要有一个 - 就可以，这样表示只是为了对其更加好看<br>文字默认居左<br>在两边加”:”表示居中 eg:   :----:<br>在右边加”:”表示居右 eg:   ----:</li><li>示例<pre><code>| 居左 | 居中 | 居右 ||:---|:----:|----:|| TD1 | TD2 | TD3 || TD4 | TD5 | TD6 |</code></pre></li><li>显示如下:   </li></ul><table><thead><tr><th style="text-align:left">居左</th><th style="text-align:center">居中</th><th style="text-align:right">居右</th></tr></thead><tbody><tr><td style="text-align:left">TD1</td><td style="text-align:center">TD2</td><td style="text-align:right">TD3</td></tr><tr><td style="text-align:left">TD4</td><td style="text-align:center">TD5</td><td style="text-align:right">TD6</td></tr></tbody></table><ul><li>这里踩的坑<br>所有的|不要忘记了，还有就是注意空格，都要靠左写，这个代码的规范很重要哟</li></ul><h1 id="十一-其他"><a href="#十一-其他" class="headerlink" title="十一 其他"></a>十一 其他</h1><ul><li>特殊字符处理<br>Markdown中用反斜杠+要插入的字符来表示语法中用到的特殊字符，在Markdown中需要处理的特殊的符号主要有如下几种:<br>\  反斜杠<br>`  反引号<br>*  星号<br>_  底线<br>{} 花括号<br>[] 中括号<br>() 小括号<br>#  井号<br>+  加号<br>-  减号<br>.  英文句号<br>等。。。<br>所以，我们需要输入这些字符的时候，我们需要输入 \加上特殊字符，eg: \-表示： - </li><li>注意：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</li><li>这个尤其要注意，真的要多注意，真的多注意，重要的事情说三遍</li></ul><h1 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h1><p>Markdown是一门比html更简单的标记语言，其主要用于日常写作。最终通过相应的编辑器或者脚本转换成html用于页面渲染。为了以后能够继续将自己学到的东西写在自己的博客上，所以今天学了下Markdown，感觉这个软件是真的好用，第一次用Markdown编辑博客的内容，不求最好，只求更好。继续加油！！！其中有什么好的建议的话，欢迎来指正哦！！！<br>最后，这个文章不知道改了多少次，自己真的是很粗心，以后多注意了，我要睡觉了（哭笑）2018/12/23/00：56 早安</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tensorflow</title>
      <link href="/2018/12/21/tensorflow-1/"/>
      <url>/2018/12/21/tensorflow-1/</url>
      
        <content type="html"><![CDATA[<h1 id="一-忽略CPU警告"><a href="#一-忽略CPU警告" class="headerlink" title="一 忽略CPU警告"></a>一 忽略CPU警告</h1><p>import os<br>os.environ[‘TF_CPP_MIN_LOG_LEVEL’]=’2’  </p><h1 id="二-运行TensorFlow"><a href="#二-运行TensorFlow" class="headerlink" title="二 运行TensorFlow"></a>二 运行TensorFlow</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf   </span><br><span class="line">hello = tf.constant(&apos;Hello, TensorFlow!&apos;)  </span><br><span class="line">sess = tf.Session()  </span><br><span class="line">print(sess.run(hello))  </span><br><span class="line">print(&quot;hello world!!&quot;)  </span><br><span class="line">注意：  </span><br><span class="line">global_variables_initializer()替换</span><br></pre></td></tr></table></figure><h1 id="三-spyder-kreas检测是不是可以使用"><a href="#三-spyder-kreas检测是不是可以使用" class="headerlink" title="三 spyder kreas检测是不是可以使用"></a>三 spyder kreas检测是不是可以使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf  </span><br><span class="line">import numpy as np  </span><br><span class="line"></span><br><span class="line">#import keras    装完keras后，去掉#尝试运行，用于检验安装  </span><br><span class="line"></span><br><span class="line">x=tf.placeholder(&quot;float&quot;)  </span><br><span class="line">y=tf.placeholder(&quot;float&quot;)  </span><br><span class="line">w=tf.Variable([1.0,2.0],name=&apos;w&apos;)  </span><br><span class="line">y_pred=tf.multiply(x,w[0])+w[1]  </span><br><span class="line">error=tf.square(y-y_pred)  </span><br><span class="line"> </span><br><span class="line">train_op=tf.train.GradientDescentOptimizer(0.02).minimize(error)  </span><br><span class="line">model=tf.initialize_all_variables()  </span><br><span class="line"> </span><br><span class="line">with tf.Session() as session:  </span><br><span class="line">    session.run(model)  </span><br><span class="line">    for i in range(1000):  </span><br><span class="line">        x_value=np.random.rand()  </span><br><span class="line">        y_value=x_value*2+6  </span><br><span class="line">        session.run([train_op],feed_dict=&#123;x:x_value,y:y_value&#125;)  </span><br><span class="line">    </span><br><span class="line">    w_value=session.run(w)# get w</span><br><span class="line">    print (&quot;ax+b,a=%.3f,b=%.3f&quot;%(w_value[0],w_value[1]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
